4+5
install.packages("Rcmdr")
install.packages("tm")
install.packages("openNLP")
install.packages("NLP")
install.packages("igraph")
library(tm)
doc = c("This is a sample document.", "My second document is a dummy document.", "This is another example of random text.")
df = as.data.frame(doc)     # this function is under base system library
corp = Corpus(VectorSource(df$doc))
dtm = DocumentTermMatrix(corp)
tdm = TermDocumentMatrix(corp)
freq_terms = findFreqTerms(tdm)
freq_terms
token1 = tm_map(corp, MC_tokenizer)
inspect(token1)
token2 = tm_map(corp, scan_tokenizer)
inspect(token2)   # to view the contents of the corpus
corp <- tm_map(corp, stripWhitespace)     # remove whitespaces
corp <- tm_map(corp, content_transformer(tolower))    # transforms the content to lowercase
corp <- tm_map(corp, removePunctuation)   # remove punctuations
corp <- tm_map(corp,removeNumbers)          # remove numbers from text.
library(openNLP)
library(NLP)
tagPOS <-  function(x, ...) {   # user defined function to perform POS tagging
s <- as.String(x)
word_token_annotator <- Maxent_Word_Token_Annotator()
a2 <- Annotation(1L, "sentence", 1L, nchar(s))
a2 <- annotate(s, word_token_annotator, a2)
a3 <- annotate(s, Maxent_POS_Tag_Annotator(), a2)
a3w <- a3[a3$type == "word"]
POStags <- unlist(lapply(a3w$features, `[[`, "POS"))
POStagged <- paste(sprintf("%s/%s", s[a3w], POStags), collapse = " ")
list(POStagged = POStagged, POStags = POStags)
}
tagged_text <- tagPOS(corp[[1]])  #as single individual strings
tagged_text       #view output
tagged_text <- tagPOS(corp[[1]])  #as single individual strings
library(openNLP)
install.packages("openNLP")
library(openNLP)
install.packages("openNLP")
install.packages("rJava", type="source")
install.packages("openNLP")
library(openNLP)
library(openNLP)
install.packages("openNLP")
library(openNLP)
library(tm)
doc = c("This is a sample document.", "My second document is a dummy document.", "This is another example of random text.")
df = as.data.frame(doc)     # this function is under base system library
corp = Corpus(VectorSource(df$doc))
dtm = DocumentTermMatrix(corp)
tdm = TermDocumentMatrix(corp)
freq_terms = findFreqTerms(tdm)
freq_terms
token1 = tm_map(corp, MC_tokenizer)
inspect(token1)
token2 = tm_map(corp, scan_tokenizer)
inspect(token2)   # to view the contents of the corpus
corp <- tm_map(corp, stripWhitespace)     # remove whitespaces
corp <- tm_map(corp, content_transformer(tolower))    # transforms the content to lowercase
corp <- tm_map(corp, removePunctuation)   # remove punctuations
corp <- tm_map(corp,removeNumbers)          # remove numbers from text.
library(openNLP)
install.packages("openNLP", type = "source")
library(openNLP)
library("openNLP", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(tm)
doc = c("This is a sample document.", "My second document is a dummy document.", "This is another example of random text.")
df = as.data.frame(doc)     # this function is under base system library
corp = Corpus(VectorSource(df$doc))
dtm = DocumentTermMatrix(corp)
tdm = TermDocumentMatrix(corp)
freq_terms = findFreqTerms(tdm)
freq_terms
token1 = tm_map(corp, MC_tokenizer)
inspect(token1)
token2 = tm_map(corp, scan_tokenizer)
inspect(token2)   # to view the contents of the corpus
corp <- tm_map(corp, stripWhitespace)     # remove whitespaces
corp <- tm_map(corp, content_transformer(tolower))    # transforms the content to lowercase
corp <- tm_map(corp, removePunctuation)   # remove punctuations
corp <- tm_map(corp,removeNumbers)          # remove numbers from text.
library(openNLP)
library(NLP)
library(openNLP)
install.packages("rJava", type = "source")
install.packages("openNLP")
install.packages("rJava")
library(openNLP)
install.packages("openNLP")
install.packages("rJava", type = "source")
install.packages("openNLP", type = "source")
library(openNLP)
library(igraph)
library(igraph)
CorenessLayout <- function(g) {
coreness <- graph.coreness(g);
xy <- array(NA, dim=c(length(coreness), 2));
shells <- sort(unique(coreness));
for(shell in shells) {
v <- 1 - ((shell-1) / max(shells));
nodes_in_shell <- sum(coreness==shell);
angles <- seq(0,360,(360/nodes_in_shell));
angles <- angles[-length(angles)]; # remove last element
xy[coreness==shell, 1] <- sin(angles) * v;
xy[coreness==shell, 2] <- cos(angles) * v;
}
return(xy);
}
karate <- read.graph("/Downloads/karate/karate.gml",
format = "gml")
help("read.graph")
karate <- read_graph("/Downloads/karate/karate.gml",
format = "gml")
karate <- read_graph("/Users/swagata/Downloads/karate/karate.gml",
format = "gml")
g = karate
coreness <- graph.coreness(g)
colbar <- rainbow(max(coreness))
ll <- CorenessLayout(g)
plot(g, layout=ll, vertex.size=15, vertex.color=colbar[coreness], vertex.frame.color=colbar[coreness], main='Coreness')
source('~/Documents/R experiments/kcore-graph-plot.R')
tkplot(g, layout=ll, vertex.size=15, vertex.color=colbar[coreness], vertex.frame.color=colbar[coreness], main='Coreness')
plot(g, layout=ll, vertex.size=15, vertex.color=colbar[coreness], vertex.frame.color=colbar[coreness], main='Coreness')
source('~/Documents/R experiments/kcore-graph-plot.R')
source('~/Documents/R experiments/kcore-graph-plot.R')
source('~/Documents/R experiments/kcore-graph-plot.R')
source('~/Documents/R experiments/kcore-graph-plot.R')
source('~/Documents/R experiments/kcore-graph-plot.R')
source('~/Documents/R experiments/kcore-graph-plot.R')
source('~/Documents/R experiments/kcore-graph-plot.R')
source('~/Documents/R experiments/kcore-graph-plot.R')
karate <- read_graph("/Users/swagata/Downloads/tina/AskCog.net", format = "pajek")
karate <- read_graph("/Users/swagata/Downloads/tina/AskCog.net", format = "pajek")
source('~/Documents/R experiments/kcore-graph-plot.R')
source('~/Documents/R experiments/kcore-graph-plot.R')
source('~/Documents/R experiments/kcore-graph-plot.R')
source('~/Documents/R experiments/kcore-graph-plot.R')
source('/Volumes/NO NAME/ktruss-graph-plot.R')
source('/Volumes/NO NAME/ktruss-graph-plot.R')
source('~/Documents/R experiments/kcore-graph-plot.R')
source('~/Documents/R experiments/kcore-graph-plot.R')
shells <- sort(unique(coreness));
shells
shell=4
v <- 1 - ((shell-1) / max(shells));
nodes_in_shell <- sum(coreness==shell);
v
nodes_in_shell
source('~/Documents/R experiments/kcore-graph-plot.R')
source('~/Documents/R experiments/kcore-graph-plot.R')
source('~/Documents/R experiments/kcore-graph-plot.R')
source('~/Documents/R experiments/kcore-graph-plot.R')
angles <- seq(0,360,(360/nodes_in_shell));
angles
angles <- angles[-length(angles)]; # remove last element
angles
xy[coreness==shell, 1] <- sin(angles) * v;
xy <- array(NA, dim=c(length(coreness), 2));
xy[coreness==shell, 1] <- sin(angles) * v;
xy[coreness==shell, 2] <- cos(angles) * v;
xy
plot(g, v= c(1,8,33,2,9,34,3,14,4,31))
plot(v= c(1,8,33,2,9,34,3,14,4,31))
sub_g = subgraph(g, v= c(1,8,33,2,9,34,3,14,4,31))
sub_g
plot(sub_g)
plot(sub_g, layout = xy)
xy
plot(sub_g, layout = ll)
source('~/Documents/R experiments/kcore-graph-plot.R')
source('~/Documents/R experiments/kcore-graph-plot.R')
source('~/Documents/R experiments/kcore-graph-plot.R')
source('~/Documents/R experiments/kcore-graph-plot.R')
ll
.25*sin(288)
.25*cos(288)
.25*sin(252)
.25*cos(252)
.25*sin(324)
.25*cos(324)
.25*sin(36)
.25*cos(36)
sin(90+18)
sin(18)
-sin(18)
cos(18)
sin(108)
cos(18)
cos(108)
-sin(18)
source('~/Documents/R experiments/kcore-graph-plot.R')
source('~/Documents/R experiments/kcore-graph-plot.R')
install.packages("twitteR", "RCurl", "RJSONIO", "stringr")
install.packages("twitteR", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("stringr", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("stringr")
install.packages("RJSONIO", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("ROAuth", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("RCurl", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(stringr)
library(RJSONIO)
library(RCurl)
install.packages("RCurl", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(RCurl)
library(ROAuth)
library(twitteR)
api_key <- "60qN3xUva3OyzcA7k3EhOFylh" # From dev.twitter.com
api_secret <- "n760zrgltLAxsbQgwaH5GrkcHaavTzJK1Nnys5hpwTm77lKjgy" # From dev.twitter.com
token <- "2735152380-r0kVGbVwwMATemZwoVbi2wKaLTW8zedwYYW4N7k" # From dev.twitter.com
token_secret <- "S7xpIVAvZNO70bl6aClTwb1kkRKIFKFyCvFnPd7nXJ8dM" # From dev.twitter.com
setup_twitter_oauth(api_key, api_secret, token, token_secret)
tweets <- searchTwitter("#MannKiBaat", n=100, lang="en", since="2017-05-26")
tweets.df <- twListToDF(tweets)
tweets.df
tweets
tweets.df
tweets.df$text
tweets.df$text[1]
sd(12,14,18,23,27,28,34,37,39,40)
sd(c(12,14,18,23,27,28,34,37,39,40))
?sd
sd(c(12,14,18,23,27,28,34,37,39,40)) * 9
sd(c(12,14,18,23,27,28,34,37,39,40)) * 9/10
d = c(12,14,18,23,27,28,34,37,39,40)
mean(d)
sd(d)
var(d)
sqrt(var(d))
sd(c(300,500,1000,2000,3500,4000,4300,6000,2500,2700))
sd(c(300,500,1000,2000,3500,4000,4300,6000,2500,2700))*9
sd(c(300,500,1000,2000,3500,4000,4300,6000,2500,2700))*10
sd(c(300,500,1000,2000,3500,4000,4300,6000,2500,2700))*10
sd(c(300,500,1000,2000,3500,4000,4300,6000,2500,2700))*10/9
sd(c(300,500,1000,2000,3500,4000,4300,6000,2500,2700))*9/10
sqrt((sd(d) ^ 2) * ((9) / 10))
mean(c(1,3,1))
sqrt((sd(c(1,3,1)) ^ 2) * ((9) / 10))
sqrt((sd(c(70,100,250)) ^ 2) * ((9) / 10))
mean(c(70,100,250))
x = c(1,3,1)
y = c(70,100,250)
dist(rbind(x, y), method = "euclidean")
x = c(-0.612,1.215,-0.612)
y = c(-0.765,-0.437,1.2023)
dist(rbind(x, y), method = "euclidean")
words = c("gv","bjhsdb","gv")
w= "gv"
posi = which(words == w)
posi
invertNum <- function(x){
return(as.numeric(1/x))
}
weight = 0
for(i in 1:length(posi)){
weight = weight + invertNum(posi[i])
}
weight
source('~/Documents/R experiments/PositionRank.R')
text_nodes
nodes_rank
?matrix
i
node_weight
source('~/Documents/R experiments/PositionRank.R')
source('~/Documents/R experiments/PositionRank.R')
keywords_list
a = c(1,2,3)
b = c(1,3,4)
intersect(a,b)
setdiff(a,b)
intersect(b,a)
setdiff(b,a)
for(i in 1:3){
r = paste(i,$)
for(i in 1:3){
r = paste(i,'$')
}
r
for(i in 1:3){
r = paste(r,i,'$')
}
r
source('~/Documents/R experiments/array-diff.R')
source('~/Documents/R experiments/array-diff.R')
output
source('~/Documents/R experiments/array-diff.R')
output
source('~/Documents/R experiments/array-diff.R')
source('~/Documents/R experiments/array-diff.R')
source('~/Documents/R experiments/array-diff.R')
n = readline()
is.integer(n)
if(arr_size < 3 || arr_size > 1000000)
{}
arr_size = readinteger("Enter array size (3 < n < 1000000): ")
arr_size < 3 || arr_size > 1000000
runif(1,3,1000000)
ceiling(runif(1,3,1000000))
output
cat(output)
source('~/.active-rstudio-document')
Sys.time()
t1 = Sys.time()
t2 = Sys.time()
t2-t1
diff = t2-t1
diff
t3 = Sys.time()
diff2 = t3-t2
diff2
library(igraph)
?page.rank
a = c(1,2,3,4)
b = c(2,4,1,3)
c = (2*a*b)/(a+b)
c
4/3
source('~/Documents/R experiments/damping-factor-check.R')
source('~/Documents/R experiments/damping-factor-check.R')
source('~/Documents/R experiments/damping-factor-check.R')
retlst4 = SeeLabels(paste0(file_id, keyext), text_nodes) # Checking TP or FP for each node
source('~/Documents/R experiments/damping-factor-check.R')
retlst4 = SeeLabels(paste0(file_id, ".uncontr"), text_nodes) # Checking TP or FP for each node
f
source('~/Documents/R experiments/damping-factor-check.R')
f
files
source('~/Documents/R experiments/damping-factor-check.R')
source('~/Documents/R experiments/damping-factor-check.R')
f
file_id=as.character(file_path_sans_ext(f))
file_id
file_id = unlist(strsplit(file_id, "_"))[2]
file_id
source('~/Documents/R experiments/damping-factor-check.R')
setwd("/Users/swagata/Documents/DATASETS/Hulth2003/Test")
files <-list.files(pattern = ".*.abstr")
files = as.character(file_path_sans_ext(f))
files
files = as.character(file_path_sans_ext(files))
files
files <-list.files(pattern = ".*.abstr")
files = as.character(file_path_sans_ext(files))
files
source('~/Documents/R experiments/damping-factor-check.R')
p = page.rank(g, directed = FALSE, weights = TRUE, damping = d)$vector
retlst4
retlst4[[1]]
retlst4[[1]][4]
source('~/Documents/R experiments/damping-factor-check.R')
text_nodes <- vertex_attr(g)$name
df_p <- df_p[order(df_p$Words, decreasing = FALSE),]
source('~/Documents/R experiments/damping-factor-check.R')
ceiling(4*.33)
4*.33
round(4*.33)
round(5*.33)
5*.33
ceiling(5*.33)
source('~/Documents/R experiments/damping-factor-check.R')
source('~/Documents/R experiments/damping-factor-check.R')
myprec
retlst4[[1]][4]
unlist(retlst4[[1]][4])
source('~/Documents/R experiments/damping-factor-check.R')
df
g = graph.data.frame(df, directed = FALSE)
p = page.rank(g, directed = FALSE, weights = TRUE, damping = d)$vector
p
d
d = 0.85
p = page.rank(g, directed = FALSE, weights = TRUE, damping = d)$vector
p
p = page.rank(g, directed = FALSE, damping = d)$vector
p
source('~/Documents/R experiments/damping-factor-check.R')
source('~/Documents/R experiments/damping-factor-check.R')
g
d
d = .1
p = page.rank(g, directed = FALSE, damping = d)$vector
p
d = .85
p = page.rank(g, directed = FALSE, damping = d)$vector
p
source('~/Documents/R experiments/damping-factor-check.R')
source('~/Documents/R experiments/graph-construction.R')
source('~/Documents/R experiments/cleaning.text.R')
source('~/Documents/R experiments/text-to-graph.R')
source('~/Documents/R experiments/graph-construction.R')
source('~/Documents/R experiments/damping-factor-check.R')
source('~/Documents/R experiments/graph-construction.R')
source('~/Documents/R experiments/graph-construction.R')
source('~/Documents/R experiments/damping-factor-check.R')
linn
text_nodes
length(myrec)
sum(myrec)
myrec
source('~/Documents/R experiments/damping-factor-check.R')
source('~/Documents/R experiments/damping-factor-check.R')
source('~/Documents/R experiments/graph-construction.R')
source('~/Documents/R experiments/graph-construction.R')
source('~/Documents/R experiments/graph-construction.R')
source('~/Documents/R experiments/damping-factor-check.R')
source('~/Documents/R experiments/damping-factor-check.R')
p
text_nodes
source('~/Documents/R experiments/damping-factor-check.R')
source('~/Documents/R experiments/damping-factor-check.R')
retlst4[[1]]
retlst4[[1]][3]
source('~/Documents/R experiments/damping-factor-check.R')
